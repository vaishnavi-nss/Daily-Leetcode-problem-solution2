class Solution {
public:
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        int n = edges.size();
        vector<int> parent(n + 1);
        
        // Initialize each node as its own parent
        for (int i = 1; i <= n; i++) {
            parent[i] = i;
        }
        
        // Find function with path compression
        function<int(int)> find = [&](int node) {
            if (parent[node] != node) {
                parent[node] = find(parent[node]); // Path compression
            }
            return parent[node];
        };

        // Union function
        auto unite = [&](int u, int v) {
            int rootU = find(u);
            int rootV = find(v);
            
            if (rootU == rootV) {
                return false; // Cycle detected
            }
            
            parent[rootU] = rootV; // Merge components
            return true;
        };

        // Process each edge
        for (auto& edge : edges) {
            int u = edge[0], v = edge[1];
            if (!unite(u, v)) {
                return edge; // Redundant edge found
            }
        }

        return {}; // This case shouldn't happen
    }
};
